# Define the user and worker processes
user nginx;
worker_processes auto;
pid /run/nginx.pid;

# Setup events module
events {
    worker_connections 1024;
}

http {
    # Incrementar el tiempo máximo de espera para el cliente
    client_body_timeout 3m;
    client_header_timeout 3m;
    
    # Incrementar el tiempo de espera del proxy (en caso de que Nginx esté actuando como proxy inverso)
    proxy_connect_timeout 3m;
    proxy_send_timeout 3m;
    proxy_read_timeout 3m;
    
    # Aumentar el tiempo de espera de los buffers
    send_timeout 3m;

    # Define log formats and paths
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Define the MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 8080;
        include /etc/nginx/snippets/resolver.conf;

        set $assistant_service       "backend.proyect_direction.local:8080";
        set $frontend                "front.proyect_direction.local:8080";

        # Health Check Endpoint
        location = /health {
            access_log off; # Disable logging for health check requests
            return 200 'ok'; # Respond with 200 OK and a simple body
            add_header Content-Type text/plain;
        }

        # Assistant Service
        location ~ ^(/(?<subdirectory>[a-z-]+))?/api(?<any>.*) {
            # include /etc/nginx/snippets/cors.conf;
            proxy_pass http://$assistant_service$any$is_args$args;
            # include /etc/nginx/snippets/proxy_params.conf;
        }

        # Frontend Service
        location ~ ^(/(?<subdirectory>[a-z-]+))?(/(?<any>[a-zA-Z0-9.+-_/?%=&]*)(.*))?$ {
            proxy_pass http://$frontend$uri$is_args$args;
            # include /etc/nginx/snippets/proxy_params.conf;
        }
    }
}
